package main

import (
	"fmt"
)

// 注意 ^2是取反 5^2是位运算符（异或）
func main() {

	// 计算机都是补码运算
	// 计算机只能做加号 (所有需要补码满足运算)
	// 最高位位符号位 1为负0正

	// 源码  反码  补码
	// 正数 三码和一
	// 反码 符号不变 其余位取反 ^
	// 补码 反码(符号不变 其余位取反)加一

	// 位运算符
	// & 都为1则为1
	// | 有一个为1则为1
	// ^ 两个不同则为1
	// >> 右移 符号位不变  低位溢出  高位用符号位补齐
	// << 左移 符号位不变  高位溢出  低位用0补齐

	fmt.Printf(" -2^3 = %d \n", -2^3)
	// -2 源码 			1000 0010
	// -2 反码 			1111 1101		（符号不变 其余位取反）
	// -2 补码 			1111 1110		（反码加一）
	// 3的补码			0000 0011
	// ^ 运算			1111 1101
	// 结果的反码		1111 1100		（补码减一）
	// 结果的源码		1000 0011 = -3	（符号不变 其余位取反）

	a := 1
	b := 0
	fmt.Printf("a = %d, b = %d \n", a, b)
	a = a ^ b // 1^0 1
	b = a ^ b // 1^0^1
	a = a ^ b // 1^0^0
	fmt.Printf("a = %d, b = %d \n", a, b)

	fmt.Printf(" 9>>3 = %d \n", 9>>3)
	// 9 补码 			0000 1001
	// >> 右移			0000 0001 = 1

	fmt.Printf(" -9>>3 = %d \n", -9>>3)
	// -9 源码 			1000 1001
	// -9 补码 			1111 0111
	// >> 右移			1111 1110
	// 反码				1111 1101
	// 源码				1000 0010 = -2

	fmt.Printf(" 2<<3 = %d \n", 2<<3)
	// 2 补码 			0000 0010
	// << 左移			0001 0000 = 16

	// 取反 ^
	fmt.Printf("^1 = %v \t %08b\n", ^1, ^1)
	fmt.Printf("^-1 = %v \t %08b\n", ^-1, ^-1)

	// a&^b = a&(^b)
	// 将运算符左边数据相异的位保留，相同位清零
	//   1、如果右侧是0，则左侧数保持不变
	//   2、如果右侧是1，则左侧数一定清零
	fmt.Println(0 &^ 0)
	fmt.Println(0 &^ 1)
	fmt.Println(1 &^ 0)
	fmt.Println(1 &^ 1)
}
